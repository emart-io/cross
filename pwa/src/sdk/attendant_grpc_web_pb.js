/**
 * @fileoverview gRPC-Web generated client stub for zwan
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: attendant.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = {};
proto.zwan = require('./attendant_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.zwan.AttendantsClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.zwan.AttendantsPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Attendant,
 *   !proto.zwan.Attendant>}
 */
const methodDescriptor_Attendants_Add = new grpc.web.MethodDescriptor(
  '/zwan.Attendants/Add',
  grpc.web.MethodType.UNARY,
  proto.zwan.Attendant,
  proto.zwan.Attendant,
  /**
   * @param {!proto.zwan.Attendant} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Attendant.deserializeBinary
);


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.zwan.Attendant)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Attendant>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.AttendantsClient.prototype.add =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Attendants/Add',
      request,
      metadata || {},
      methodDescriptor_Attendants_Add,
      callback);
};


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.zwan.Attendant>}
 *     Promise that resolves to the response
 */
proto.zwan.AttendantsPromiseClient.prototype.add =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Attendants/Add',
      request,
      metadata || {},
      methodDescriptor_Attendants_Add);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Attendant,
 *   !proto.zwan.Attendant>}
 */
const methodDescriptor_Attendants_Get = new grpc.web.MethodDescriptor(
  '/zwan.Attendants/Get',
  grpc.web.MethodType.UNARY,
  proto.zwan.Attendant,
  proto.zwan.Attendant,
  /**
   * @param {!proto.zwan.Attendant} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Attendant.deserializeBinary
);


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.zwan.Attendant)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Attendant>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.AttendantsClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Attendants/Get',
      request,
      metadata || {},
      methodDescriptor_Attendants_Get,
      callback);
};


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.zwan.Attendant>}
 *     Promise that resolves to the response
 */
proto.zwan.AttendantsPromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Attendants/Get',
      request,
      metadata || {},
      methodDescriptor_Attendants_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Attendant,
 *   !proto.zwan.Attendant>}
 */
const methodDescriptor_Attendants_Update = new grpc.web.MethodDescriptor(
  '/zwan.Attendants/Update',
  grpc.web.MethodType.UNARY,
  proto.zwan.Attendant,
  proto.zwan.Attendant,
  /**
   * @param {!proto.zwan.Attendant} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Attendant.deserializeBinary
);


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.zwan.Attendant)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Attendant>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.AttendantsClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Attendants/Update',
      request,
      metadata || {},
      methodDescriptor_Attendants_Update,
      callback);
};


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.zwan.Attendant>}
 *     Promise that resolves to the response
 */
proto.zwan.AttendantsPromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Attendants/Update',
      request,
      metadata || {},
      methodDescriptor_Attendants_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Attendant,
 *   !proto.zwan.Attendant>}
 */
const methodDescriptor_Attendants_List = new grpc.web.MethodDescriptor(
  '/zwan.Attendants/List',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.zwan.Attendant,
  proto.zwan.Attendant,
  /**
   * @param {!proto.zwan.Attendant} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Attendant.deserializeBinary
);


/**
 * @param {!proto.zwan.Attendant} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Attendant>}
 *     The XHR Node Readable Stream
 */
proto.zwan.AttendantsClient.prototype.list =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/zwan.Attendants/List',
      request,
      metadata || {},
      methodDescriptor_Attendants_List);
};


/**
 * @param {!proto.zwan.Attendant} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Attendant>}
 *     The XHR Node Readable Stream
 */
proto.zwan.AttendantsPromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/zwan.Attendants/List',
      request,
      metadata || {},
      methodDescriptor_Attendants_List);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Attendant,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_Attendants_Delete = new grpc.web.MethodDescriptor(
  '/zwan.Attendants/Delete',
  grpc.web.MethodType.UNARY,
  proto.zwan.Attendant,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.zwan.Attendant} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.AttendantsClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Attendants/Delete',
      request,
      metadata || {},
      methodDescriptor_Attendants_Delete,
      callback);
};


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.zwan.AttendantsPromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Attendants/Delete',
      request,
      metadata || {},
      methodDescriptor_Attendants_Delete);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Attendant,
 *   !proto.zwan.Attendant>}
 */
const methodDescriptor_Attendants_Login = new grpc.web.MethodDescriptor(
  '/zwan.Attendants/Login',
  grpc.web.MethodType.UNARY,
  proto.zwan.Attendant,
  proto.zwan.Attendant,
  /**
   * @param {!proto.zwan.Attendant} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Attendant.deserializeBinary
);


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.zwan.Attendant)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Attendant>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.AttendantsClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Attendants/Login',
      request,
      metadata || {},
      methodDescriptor_Attendants_Login,
      callback);
};


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.zwan.Attendant>}
 *     Promise that resolves to the response
 */
proto.zwan.AttendantsPromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Attendants/Login',
      request,
      metadata || {},
      methodDescriptor_Attendants_Login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Attendant,
 *   !proto.zwan.Attendant>}
 */
const methodDescriptor_Attendants_Certificate = new grpc.web.MethodDescriptor(
  '/zwan.Attendants/Certificate',
  grpc.web.MethodType.UNARY,
  proto.zwan.Attendant,
  proto.zwan.Attendant,
  /**
   * @param {!proto.zwan.Attendant} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Attendant.deserializeBinary
);


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.zwan.Attendant)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Attendant>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.AttendantsClient.prototype.certificate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Attendants/Certificate',
      request,
      metadata || {},
      methodDescriptor_Attendants_Certificate,
      callback);
};


/**
 * @param {!proto.zwan.Attendant} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.zwan.Attendant>}
 *     Promise that resolves to the response
 */
proto.zwan.AttendantsPromiseClient.prototype.certificate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Attendants/Certificate',
      request,
      metadata || {},
      methodDescriptor_Attendants_Certificate);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.zwan.AddressesClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.zwan.AddressesPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Address,
 *   !proto.zwan.Address>}
 */
const methodDescriptor_Addresses_Add = new grpc.web.MethodDescriptor(
  '/zwan.Addresses/Add',
  grpc.web.MethodType.UNARY,
  proto.zwan.Address,
  proto.zwan.Address,
  /**
   * @param {!proto.zwan.Address} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Address.deserializeBinary
);


/**
 * @param {!proto.zwan.Address} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.zwan.Address)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Address>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.AddressesClient.prototype.add =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Addresses/Add',
      request,
      metadata || {},
      methodDescriptor_Addresses_Add,
      callback);
};


/**
 * @param {!proto.zwan.Address} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.zwan.Address>}
 *     Promise that resolves to the response
 */
proto.zwan.AddressesPromiseClient.prototype.add =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Addresses/Add',
      request,
      metadata || {},
      methodDescriptor_Addresses_Add);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Address,
 *   !proto.zwan.Address>}
 */
const methodDescriptor_Addresses_Get = new grpc.web.MethodDescriptor(
  '/zwan.Addresses/Get',
  grpc.web.MethodType.UNARY,
  proto.zwan.Address,
  proto.zwan.Address,
  /**
   * @param {!proto.zwan.Address} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Address.deserializeBinary
);


/**
 * @param {!proto.zwan.Address} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.zwan.Address)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Address>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.AddressesClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Addresses/Get',
      request,
      metadata || {},
      methodDescriptor_Addresses_Get,
      callback);
};


/**
 * @param {!proto.zwan.Address} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.zwan.Address>}
 *     Promise that resolves to the response
 */
proto.zwan.AddressesPromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Addresses/Get',
      request,
      metadata || {},
      methodDescriptor_Addresses_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Address,
 *   !proto.zwan.Address>}
 */
const methodDescriptor_Addresses_Update = new grpc.web.MethodDescriptor(
  '/zwan.Addresses/Update',
  grpc.web.MethodType.UNARY,
  proto.zwan.Address,
  proto.zwan.Address,
  /**
   * @param {!proto.zwan.Address} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Address.deserializeBinary
);


/**
 * @param {!proto.zwan.Address} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.zwan.Address)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Address>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.AddressesClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Addresses/Update',
      request,
      metadata || {},
      methodDescriptor_Addresses_Update,
      callback);
};


/**
 * @param {!proto.zwan.Address} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.zwan.Address>}
 *     Promise that resolves to the response
 */
proto.zwan.AddressesPromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Addresses/Update',
      request,
      metadata || {},
      methodDescriptor_Addresses_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Address,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_Addresses_Delete = new grpc.web.MethodDescriptor(
  '/zwan.Addresses/Delete',
  grpc.web.MethodType.UNARY,
  proto.zwan.Address,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.zwan.Address} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.zwan.Address} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.AddressesClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Addresses/Delete',
      request,
      metadata || {},
      methodDescriptor_Addresses_Delete,
      callback);
};


/**
 * @param {!proto.zwan.Address} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.zwan.AddressesPromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Addresses/Delete',
      request,
      metadata || {},
      methodDescriptor_Addresses_Delete);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Attendant,
 *   !proto.zwan.Address>}
 */
const methodDescriptor_Addresses_List = new grpc.web.MethodDescriptor(
  '/zwan.Addresses/List',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.zwan.Attendant,
  proto.zwan.Address,
  /**
   * @param {!proto.zwan.Attendant} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Address.deserializeBinary
);


/**
 * @param {!proto.zwan.Attendant} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Address>}
 *     The XHR Node Readable Stream
 */
proto.zwan.AddressesClient.prototype.list =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/zwan.Addresses/List',
      request,
      metadata || {},
      methodDescriptor_Addresses_List);
};


/**
 * @param {!proto.zwan.Attendant} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Address>}
 *     The XHR Node Readable Stream
 */
proto.zwan.AddressesPromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/zwan.Addresses/List',
      request,
      metadata || {},
      methodDescriptor_Addresses_List);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.zwan.MemosClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.zwan.MemosPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Memo,
 *   !proto.zwan.Memo>}
 */
const methodDescriptor_Memos_Add = new grpc.web.MethodDescriptor(
  '/zwan.Memos/Add',
  grpc.web.MethodType.UNARY,
  proto.zwan.Memo,
  proto.zwan.Memo,
  /**
   * @param {!proto.zwan.Memo} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Memo.deserializeBinary
);


/**
 * @param {!proto.zwan.Memo} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.zwan.Memo)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Memo>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.MemosClient.prototype.add =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Memos/Add',
      request,
      metadata || {},
      methodDescriptor_Memos_Add,
      callback);
};


/**
 * @param {!proto.zwan.Memo} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.zwan.Memo>}
 *     Promise that resolves to the response
 */
proto.zwan.MemosPromiseClient.prototype.add =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Memos/Add',
      request,
      metadata || {},
      methodDescriptor_Memos_Add);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Memo,
 *   !proto.zwan.Memo>}
 */
const methodDescriptor_Memos_Get = new grpc.web.MethodDescriptor(
  '/zwan.Memos/Get',
  grpc.web.MethodType.UNARY,
  proto.zwan.Memo,
  proto.zwan.Memo,
  /**
   * @param {!proto.zwan.Memo} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Memo.deserializeBinary
);


/**
 * @param {!proto.zwan.Memo} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.zwan.Memo)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Memo>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.MemosClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Memos/Get',
      request,
      metadata || {},
      methodDescriptor_Memos_Get,
      callback);
};


/**
 * @param {!proto.zwan.Memo} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.zwan.Memo>}
 *     Promise that resolves to the response
 */
proto.zwan.MemosPromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Memos/Get',
      request,
      metadata || {},
      methodDescriptor_Memos_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Memo,
 *   !proto.zwan.Memo>}
 */
const methodDescriptor_Memos_Update = new grpc.web.MethodDescriptor(
  '/zwan.Memos/Update',
  grpc.web.MethodType.UNARY,
  proto.zwan.Memo,
  proto.zwan.Memo,
  /**
   * @param {!proto.zwan.Memo} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Memo.deserializeBinary
);


/**
 * @param {!proto.zwan.Memo} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.zwan.Memo)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Memo>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.MemosClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Memos/Update',
      request,
      metadata || {},
      methodDescriptor_Memos_Update,
      callback);
};


/**
 * @param {!proto.zwan.Memo} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.zwan.Memo>}
 *     Promise that resolves to the response
 */
proto.zwan.MemosPromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Memos/Update',
      request,
      metadata || {},
      methodDescriptor_Memos_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Memo,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_Memos_Delete = new grpc.web.MethodDescriptor(
  '/zwan.Memos/Delete',
  grpc.web.MethodType.UNARY,
  proto.zwan.Memo,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.zwan.Memo} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.zwan.Memo} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.zwan.MemosClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/zwan.Memos/Delete',
      request,
      metadata || {},
      methodDescriptor_Memos_Delete,
      callback);
};


/**
 * @param {!proto.zwan.Memo} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.zwan.MemosPromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/zwan.Memos/Delete',
      request,
      metadata || {},
      methodDescriptor_Memos_Delete);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.zwan.Attendant,
 *   !proto.zwan.Memo>}
 */
const methodDescriptor_Memos_List = new grpc.web.MethodDescriptor(
  '/zwan.Memos/List',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.zwan.Attendant,
  proto.zwan.Memo,
  /**
   * @param {!proto.zwan.Attendant} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.zwan.Memo.deserializeBinary
);


/**
 * @param {!proto.zwan.Attendant} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Memo>}
 *     The XHR Node Readable Stream
 */
proto.zwan.MemosClient.prototype.list =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/zwan.Memos/List',
      request,
      metadata || {},
      methodDescriptor_Memos_List);
};


/**
 * @param {!proto.zwan.Attendant} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.zwan.Memo>}
 *     The XHR Node Readable Stream
 */
proto.zwan.MemosPromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/zwan.Memos/List',
      request,
      metadata || {},
      methodDescriptor_Memos_List);
};


module.exports = proto.zwan;

